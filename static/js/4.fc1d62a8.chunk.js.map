{"version":3,"sources":["containers/AddressBook/AddressBook.tsx","containers/AddressBook/index.tsx"],"names":["connect","state","users","book","isFetching","isError","countries","displayedPage","getUsers","displayPage","maxPage","React","useState","modalIsOpen","setIsOpen","selectedUser","setSelectedUser","filter","setFilter","refresh","closeModal","handleRowClick","user","useEffect","useBottomScrollListener","className","value","onChange","e","target","placeholder","to","paths","settings","length","slice","Math","min","reduce","list","page","concat","name","first","toLowerCase","last","indexOf","map","idx","key","email","onClick","src","picture","thumbnail","width","height","login","username","isOpen","ariaHideApp","onRequestClose","contentLabel","large","location","street","number","city","postcode","phone","cell","AddressBook"],"mappings":"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","file":"static/js/4.fc1d62a8.chunk.js","sourcesContent":["/**\n * Defines the {@link AddressBook} React component.\n * @module\n */\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Modal from \"react-modal\";\nimport { useBottomScrollListener } from \"react-bottom-scroll-listener\";\nimport { State, User, Countries } from \"../../redux/store\";\nimport { getUsers, displayPage } from \"../../redux/book/actions\";\nimport { paths } from \"../../router\";\nimport \"./AddressBook.scss\";\n\n/**\n * Props interface for {@link AddressBook}.\n */\nexport interface Props {\n  users: User[][];\n  maxPage: number;\n  isFetching: boolean;\n  isError: boolean;\n  countries: Countries;\n  displayedPage: number;\n  getUsers: typeof getUsers;\n  displayPage: typeof displayPage;\n}\n\n/**\n * Main component for displaying address book\n *\n * @param {Props} props see {@link Props}\n * @returns AddressBook component\n */\nexport const AddressBook: React.FC<Props> = ({\n  users,\n  maxPage,\n  isFetching,\n  isError,\n  getUsers,\n  displayedPage,\n  displayPage,\n  countries\n}: Props) => {\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [selectedUser, setSelectedUser] = React.useState<User | null>(null);\n  const [filter, setFilter] = React.useState(\"\");\n\n  useEffect(() => {\n    refresh();\n  }, [countries]);\n\n  useEffect(() => {\n    getUsers(countries);\n  }, [users]);\n\n  useBottomScrollListener(() => {\n    if (!isError && !filter) {\n      displayPage();\n      getUsers(countries);\n    }\n  }, 400);\n\n  /**\n   * Fetches the catalogue from the first page\n   */\n  function refresh() {\n    setFilter(\"\");\n    displayPage(true);\n    getUsers(countries, true);\n  }\n\n  /**\n   * Openes user details modal\n   */\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  /**\n   * Closes user details modal\n   */\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  /**\n   * Catalogue row click event handler\n   * \n   * @param user - user data from application state\n   */\n  function handleRowClick(user: User) {\n    setSelectedUser(user);\n    openModal();\n  }\n\n  /**\n   * Search field value change event handler\n   * \n   * @param e - html input change event\n   */\n  function handleFilterChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setFilter(e.target.value);\n  }\n\n  /**\n   * Filters users list based on user first and last name\n   * \n   * @param user - user data from application state\n   * @returns filtered users list\n   */\n  const filterUsers = (user: User) => {\n    return (\n      `${user.name.first.toLowerCase()} ${user.name.last.toLowerCase()}`.indexOf(\n        filter.toLowerCase()\n      ) === 0\n    );\n  };\n\n  /**\n   * @returns catalogue information message\n   */\n  function displayMessage(): string | undefined {\n    if (isError) {\n      return \"Catalogue unavailable\";\n    }\n\n    if (!isFetching && displayedPage >= maxPage) {\n      return \"End of user catalogue\";\n    }\n\n    if (!isFetching && users.length === 0 && displayedPage > 0) {\n      return \"No users found\";\n    }\n\n    if (\n      !filter &&\n      !isError &&\n      displayedPage < maxPage &&\n      (users.length !== 0 || isFetching)\n    ) {\n      return \"Loading...\";\n    }\n  }\n\n  return (\n    <div className=\"address-book\">\n      <div className=\"address-book__header\">\n        <div className=\"address-book__top-bar\">\n          <span>Address Book</span>\n          <input\n            className=\"address-book__search\"\n            value={filter}\n            onChange={handleFilterChange}\n            placeholder=\"Search...\"\n          />\n          <span className=\"address-book__settings-link\">\n            <Link to={paths.settings}>Settings</Link>\n          </span>\n        </div>\n      </div>\n      <div className=\"address-book__list\">\n        {users.length ? (\n          <table className=\"address-book__table\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th></th>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Username</th>\n                <th>Email</th>\n              </tr>\n            </thead>\n            <tbody>\n              {users\n                .slice(0, Math.min(displayedPage, maxPage))\n                .reduce((list, page) => list.concat(page), [])\n                .filter(filterUsers)\n                .map((user, idx) => (\n                  <tr key={user.email} onClick={() => handleRowClick(user)}>\n                    <td>{idx + 1}</td>\n                    <td>\n                      <img\n                        src={user.picture.thumbnail}\n                        width={48}\n                        height={48}\n                      />\n                    </td>\n                    <td>{user.name.first}</td>\n                    <td>{user.name.last}</td>\n                    <td>{user.login.username}</td>\n                    <td>{user.email}</td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        ) : null}\n      </div>\n      <div className=\"address-book__message\">\n        {displayMessage()}\n        {isError ? (\n          <div>\n            <button onClick={refresh}>{\"Refresh\"}</button>\n          </div>\n        ) : null}\n      </div>\n      <Modal\n        className=\"address-book__details-modal\"\n        isOpen={modalIsOpen}\n        ariaHideApp={false}\n        onRequestClose={closeModal}\n        contentLabel=\"Example Modal\"\n      >\n        {selectedUser && (\n          <>\n            <p>{\"User Details\"}</p>\n            <div className=\"address-book__details-container\">\n              <div>\n                <img\n                  src={selectedUser.picture.large}\n                  width={128}\n                  height={128}\n                />\n              </div>\n              <div>\n                {`${selectedUser.name.first} ${selectedUser.name.last}`}\n                <div>{`${selectedUser.location.street.name} ${selectedUser.location.street.number}`}</div>\n                <div>{`${selectedUser.location.city}, ${selectedUser.location.state}`}</div>\n                <div>{selectedUser.location.postcode}</div>\n                <div>{`pho.: ${selectedUser.phone}`}</div>\n                <div>{`cell: ${selectedUser.cell}`}</div>\n              </div>\n            </div>\n\n            <div className=\"address-book__details-close\">\n              <button onClick={closeModal}>close</button>\n            </div>\n          </>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default connect(\n  (state: State) => ({\n    users: state.book.users,\n    isFetching: state.book.isFetching,\n    isError: state.book.isError,\n    countries: state.book.countries,\n    displayedPage: state.book.displayedPage\n  }),\n  { getUsers, displayPage }\n)(AddressBook);\n","import AddressBook from './AddressBook';\n\nexport default AddressBook"],"sourceRoot":""}